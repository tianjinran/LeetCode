/** //O(mn) O(1)
 * @param {number[][]} board
 * @return {void} Do not return anything, modify board in-place instead.
 */
var gameOfLife = function(board) { //O(mn) with  dead -> alive 2; alive -> dead -1;
    //in place
    //let neighbors = [-1,0,1]; //total 8 neighbors of each position
    let h = board.length; //height of board
    let w = board[0].length; //width of board
    //r = row; c = column
    for( let r = 0; r < h; r++){
        let numAliveRow = [];
        for(let c = 0; c < w; c++){
            //get the number of alive neighbors of the position r,c
            let numAlive = 0;
                for(let i = -1; i < 2; i++){ //so i will be -1,0,1, modification to add on row number.
                    for(let j = -1; j < 2; j++){ //j will be -1,0,1, modification to add on col number
                        if(!(i === 0 && j === 0)){ // don't count current position, only count neighbors
                          
                            let currR = r + i;
                            let currC = c + j;
                            
                            if(board[currR] && board[currR][currC]){     
                                if((Math.abs(board[currR][currC])) === 1){
                                numAlive ++;
                            }
                        }
                        }
                    }
                    
                }            
        //rule 1 or 3
        if(board[r][c] === 1 && ((numAlive < 2) || (numAlive > 3)) ){
            board[r][c] = -1;
        }
        //rule 2 no change
        //rule 4
        if(board[r][c] === 0 && numAlive === 3){
            board[r][c] = 2;
        }
        }
    }
    //final loop through to modify -1 and 2 to 0 and 1;
    
    for(let row = 0; row < h; row++){
        for(let col = 0; col < w; col++){
            if(board[row][col] === 2){
                board[row][col] = 1;
            }
            if(board[row][col] === -1){
                board[row][col] = 0;
            }
        }
    }
};
