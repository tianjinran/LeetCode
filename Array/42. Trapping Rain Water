var trap = function(height) {
    //brute force O(n^2)
    len = height.length;
    var res = 0;
    for (let i = 0; i < len; i++){
       // initiat left max and right max for each position.
        let maxLeft = 0;
        let maxRight = 0;
        //Getting the maximum of both sides
        // if height[i] has left
        if(i!=0){
            for (let l = 0; l < i; l++){
                if(height[l] > maxLeft){
                    maxLeft = height[l];
                }
            }   
        }
         // if height[i] has right
        if(i != len - 1){
            for (let r = i; r < len; r++){
                if(height[r] > maxRight){
                    maxRight = height[r];
                }
            }   
        }
        // add the actual amount of water above the current number
        res += Math.max(0, Math.min(maxLeft,maxRight) - height[i]);
    }
    return res;
};

var trap = function(height) {
    //DP O(n)
    const len = height.length;
    let maxLeft = [];  //Array records each elementâ€™s max left bar ever seen.
    let maxRightReverse = [];//  Avoid using unshift in a loop which makes O(n^2)
    let maxRight = []; 
    let res = 0;
    //find and store max Left height for each element
    for (let i = 0; i < len; i++){
        if(i === 0 ){ maxLeft.push(0);} //for the first element, maxLeft is always 0;
        else{maxLeft.push(Math.max(maxLeft[i-1],height[i-1]));}
    }
    //find and store max right height for each element in reverse
    for (let j = len - 1; j >= 0; j--){
        if(j === len - 1){
            maxRightReverse.push(0); // for the last element, max right is always 0;
        }else{
            maxRightReverse.push(Math.max(maxRightReverse[(len-1) - j - 1],height[j + 1]));
        }
    }
    while(maxRightReverse.length!==0){
        maxRight.push(maxRightReverse.pop());
    }
    for(let k = 0; k < len; k++){
        res += Math.max(0,Math.min(maxLeft[k],maxRight[k]) - height[k]); 
    }    
    return res;
}
